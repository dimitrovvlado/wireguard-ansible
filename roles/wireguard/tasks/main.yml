# Ensure WireGuard packages exists
- name: Install WireGuard dependencies
  apt:
    name:
      - wireguard
      - qrencode
    state: present
    update_cache: yes
    force: yes
  tags: install

# Ensure VPN user exists
- name: Ensure VPN user exists
  user:
    name: "{{ vpn_user.name }}"
    shell: "{{ vpn_user.shell | default('/bin/bash') }}"
    groups: "{{ vpn_user.groups | default(omit) }}"
    create_home: "{{ vpn_user.create_home | default(true) }}"

# Ensure clients folder exists
- name: Create config directory
  become_user: "{{ vpn_user.name }}"
  file:
    path: "/home/{{ vpn_user.name }}/conf"
    state: directory
    owner: "{{ vpn_user.name }}"
    group: "{{ vpn_user.groups | default(vpn_user.name) }}"
    mode: '0700'

- name: Create clients directory
  become_user: "{{ vpn_user.name }}"
  file:
    path: "/home/{{ vpn_user.name }}/conf/clients"
    state: directory
    owner: "{{ vpn_user.name }}"
    group: "{{ vpn_user.groups | default(vpn_user.name) }}"
    mode: '0700'

- name: Ensure IPv4 forwarding is enabled persistently
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

# Validate peer names are unique
- name: Validate peer names
  import_tasks: validate-peers.yml

# Generate the server keys if not already generated
- name: Generate WireGuard keys
  import_tasks: server-keys.yml

# Generate peer keys if not already generated
- name: Configure WireGuard peers
  import_tasks: peers-keys.yml

- name: Configure WireGuard server interface
  import_tasks: server.yml
